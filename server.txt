/*
 * This file is open source software, licensed to you under the terms
 * of the Apache License, Version 2.0 (the "License").  See the NOTICE file
 * distributed with this work for additional information regarding copyright
 * ownership.  You may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Copyright 2015 Cloudius Systems
 */
#include <cmath>
#include "seastar/core/reactor.hh"
#include "seastar/core/app-template.hh"
#include "seastar/rpc/rpc.hh"
#include "seastar/core/sleep.hh"
#include "seastar/rpc/lz4_compressor.hh"
#include <unordered_map>
#include <map>

using namespace seastar;

struct serializer {
};

template <typename T, typename Output>
inline
void write_arithmetic_type(Output& out, T v) {
    static_assert(std::is_arithmetic<T>::value, "must be arithmetic type");
    return out.write(reinterpret_cast<const char*>(&v), sizeof(T));
}

template <typename T, typename Input>
inline
T read_arithmetic_type(Input& in) {
    static_assert(std::is_arithmetic<T>::value, "must be arithmetic type");
    T v;
    in.read(reinterpret_cast<char*>(&v), sizeof(T));
    return v;
}

template <typename Output>
inline void write(serializer, Output& output, int32_t v) { return write_arithmetic_type(output, v); }
template <typename Output>
inline void write(serializer, Output& output, uint32_t v) { return write_arithmetic_type(output, v); }
template <typename Output>
inline void write(serializer, Output& output, int64_t v) { return write_arithmetic_type(output, v); }
template <typename Output>
inline void write(serializer, Output& output, uint64_t v) { return write_arithmetic_type(output, v); }
template <typename Output>
inline void write(serializer, Output& output, double v) { return write_arithmetic_type(output, v); }
template <typename Input>
inline int32_t read(serializer, Input& input, rpc::type<int32_t>) { return read_arithmetic_type<int32_t>(input); }
template <typename Input>
inline uint32_t read(serializer, Input& input, rpc::type<uint32_t>) { return read_arithmetic_type<uint32_t>(input); }
template <typename Input>
inline uint64_t read(serializer, Input& input, rpc::type<uint64_t>) { return read_arithmetic_type<uint64_t>(input); }
template <typename Input>
inline uint64_t read(serializer, Input& input, rpc::type<int64_t>) { return read_arithmetic_type<int64_t>(input); }
template <typename Input>
inline double read(serializer, Input& input, rpc::type<double>) { return read_arithmetic_type<double>(input); }

template <typename Output>
inline void write(serializer, Output& out, const sstring& v) {
    write_arithmetic_type(out, uint32_t(v.size()));
    out.write(v.c_str(), v.size());
}

template <typename Input>
inline sstring read(serializer, Input& in, rpc::type<sstring>) {
    auto size = read_arithmetic_type<uint32_t>(in);
    sstring ret(sstring::initialized_later(), size);
    in.read(ret.begin(), size);
    return ret;
}

namespace bpo = boost::program_options;
using namespace std::chrono_literals;

class mycomp : public rpc::compressor::factory {
    const sstring _name = "LZ4";
public:
    virtual const sstring& supported() const override {
        fmt::print("supported called\n");
        return _name;
    }
    virtual std::unique_ptr<rpc::compressor> negotiate(sstring feature, bool is_server) const override {
        fmt::print("negotiate called with {}\n", feature);
        return feature == _name ? std::make_unique<rpc::lz4_compressor>() : nullptr;
    }
};


class database{
private:
    static std::unordered_map<std::string, std::unordered_map<std::string, std::string>> DB;
public:
    static bool creat(std::string &tableKey)
    {
        std::unordered_map<std::string, std::string> table;
        bool ok = DB.insert({tableKey, table}).second;
        return ok;
    }

    static std::string readData(std::string &tableKey, std::string keyData)
    {
        auto table = DB.find(tableKey);
        if(table == DB.end())
            return "error";
        else
        {
            auto data = (table->second).find(keyData);
            if(data == (table->second).end())
            {
                return "error";
            } else
            {
                return data->second;
            }
        }
    }

    static bool insertData(std::string &tableKey, std::string keyData, std::string value)
    {
        auto table = DB.find(tableKey);
        if(table == DB.end())
            return false;
        else
        {
            bool ok = ((table->second).insert({keyData, value})).second;
            return ok;
        }
    }

    static bool updatetData(std::string &tableKey, std::string keyData, std::string value)
    {
        auto table = DB.find(tableKey);
        if(table == DB.end())
            return false;
        else
        {
            auto data = (table->second).find(keyData);
            if(data == (table->second).end())
            {
                return false;
            } else {
                data->second = value;
              return true;
            }
        }
    }


    static bool deleteData(std::string &tableKey, std::string keyData)
    {
        auto table = DB.find(tableKey);
        if(table == DB.end())
            return false;
        else
        {
            auto data = (table->second).find(keyData);
            if(data == (table->second).end())
            {
                return false;
            } else
            {
                (table->second).erase(data);
                return true;
            }
        }
    }

     static bool deleteTable(std::string &tableKey)
    {
        auto table = DB.find(tableKey);
        if(table == DB.end())
            return false;
        else {
            DB.erase(table);
            return true;
        }
    }

};


int main(int ac, char** av) {
    app_template app;
    std::cout << "start ";
    rpc::protocol<serializer> myrpc(serializer{});
    static std::unique_ptr<rpc::protocol<serializer>::server> server;


    myrpc.set_logger([] (const sstring& log) {
        fmt::print("{}", log);
        std::cout << std::endl;
    });

    return app.run_deprecated(ac, av, [&] {

        uint16_t port = 9000;
        bool compress = false;
        static mycomp mc;


     //   auto test2 = myrpc.register_handler(2, [](int a, int b){
    //        fmt::print("test2 got {:d} {:d}\n", a, b);
     //       return make_ready_future<int>(a+b);
     //   });
        database Database;
        auto c = myrpc.register_handler(1, database::creat);
        auto r = myrpc.register_handler(2, database::readData);
        auto u = myrpc.register_handler(3, database::updatetData);
        auto d = myrpc.register_handler(4, database::deleteData);

        rpc::resource_limits limits;
        limits.bloat_factor = 1;
        limits.basic_request_size = 0;
        limits.max_memory = 10'000'000;
        rpc::server_options so;

        server = std::make_unique<rpc::protocol<serializer>::server>(myrpc, so, ipv4_addr{"127.0.0.1",port}, limits);






    });

}
